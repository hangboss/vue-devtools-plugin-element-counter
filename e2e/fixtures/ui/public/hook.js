/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "../../node_modules/@vue-devtools/app-backend-core/lib/hook.js":
/*!*********************************************************************!*\
  !*** ../../node_modules/@vue-devtools/app-backend-core/lib/hook.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n// this script is injected into every page.\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.installHook = void 0;\n/**\n * Install the hook on window, which is an event emitter.\n * Note because Chrome content scripts cannot directly modify the window object,\n * we are evaling this function by inserting a script tag. That's why we have\n * to inline the whole event emitter implementation here.\n *\n * @param {Window|global} target\n */\nfunction installHook(target, isIframe = false) {\n    const devtoolsVersion = '6.0';\n    let listeners = {};\n    function injectIframeHook(iframe) {\n        if (iframe.__vdevtools__injected) {\n            return;\n        }\n        try {\n            iframe.__vdevtools__injected = true;\n            const inject = () => {\n                try {\n                    iframe.contentWindow.__VUE_DEVTOOLS_IFRAME__ = iframe;\n                    const script = iframe.contentDocument.createElement('script');\n                    script.textContent = `;(${installHook.toString()})(window, true)`;\n                    iframe.contentDocument.documentElement.appendChild(script);\n                    script.parentNode.removeChild(script);\n                }\n                catch (e) {\n                    // Ignore\n                }\n            };\n            inject();\n            iframe.addEventListener('load', () => inject());\n        }\n        catch (e) {\n            // Ignore\n        }\n    }\n    let iframeChecks = 0;\n    function injectToIframes() {\n        if (typeof window === 'undefined') {\n            return;\n        }\n        const iframes = document.querySelectorAll('iframe:not([data-vue-devtools-ignore])');\n        for (const iframe of iframes) {\n            injectIframeHook(iframe);\n        }\n    }\n    injectToIframes();\n    const iframeTimer = setInterval(() => {\n        injectToIframes();\n        iframeChecks++;\n        if (iframeChecks >= 5) {\n            clearInterval(iframeTimer);\n        }\n    }, 1000);\n    if (Object.prototype.hasOwnProperty.call(target, '__VUE_DEVTOOLS_GLOBAL_HOOK__')) {\n        if (target.__VUE_DEVTOOLS_GLOBAL_HOOK__.devtoolsVersion !== devtoolsVersion) {\n            console.error(`Another version of Vue Devtools seems to be installed. Please enable only one version at a time.`);\n        }\n        return;\n    }\n    let hook;\n    if (isIframe) {\n        const sendToParent = (cb) => {\n            try {\n                const hook = window.parent.__VUE_DEVTOOLS_GLOBAL_HOOK__;\n                if (hook) {\n                    return cb(hook);\n                }\n                else {\n                    console.warn('[Vue Devtools] No hook in parent window');\n                }\n            }\n            catch (e) {\n                console.warn('[Vue Devtools] Failed to send message to parent window', e);\n            }\n        };\n        hook = {\n            devtoolsVersion,\n            // eslint-disable-next-line accessor-pairs\n            set Vue(value) {\n                sendToParent((hook) => {\n                    hook.Vue = value;\n                });\n            },\n            // eslint-disable-next-line accessor-pairs\n            set enabled(value) {\n                sendToParent((hook) => {\n                    hook.enabled = value;\n                });\n            },\n            on(event, fn) {\n                sendToParent(hook => hook.on(event, fn));\n            },\n            once(event, fn) {\n                sendToParent(hook => hook.once(event, fn));\n            },\n            off(event, fn) {\n                sendToParent(hook => hook.off(event, fn));\n            },\n            emit(event, ...args) {\n                sendToParent(hook => hook.emit(event, ...args));\n            },\n            cleanupBuffer(matchArg) {\n                var _a;\n                return (_a = sendToParent(hook => hook.cleanupBuffer(matchArg))) !== null && _a !== void 0 ? _a : false;\n            },\n        };\n    }\n    else {\n        hook = {\n            devtoolsVersion,\n            Vue: null,\n            enabled: undefined,\n            _buffer: [],\n            _bufferMap: new Map(),\n            _bufferToRemove: new Map(),\n            store: null,\n            initialState: null,\n            storeModules: null,\n            flushStoreModules: null,\n            apps: [],\n            _replayBuffer(event) {\n                const buffer = this._buffer;\n                this._buffer = [];\n                this._bufferMap.clear();\n                this._bufferToRemove.clear();\n                for (let i = 0, l = buffer.length; i < l; i++) {\n                    const allArgs = buffer[i].slice(1);\n                    allArgs[0] === event\n                        // eslint-disable-next-line prefer-spread\n                        ? this.emit.apply(this, allArgs)\n                        : this._buffer.push(buffer[i]);\n                }\n            },\n            on(event, fn) {\n                const $event = `$${event}`;\n                if (listeners[$event]) {\n                    listeners[$event].push(fn);\n                }\n                else {\n                    listeners[$event] = [fn];\n                    this._replayBuffer(event);\n                }\n            },\n            once(event, fn) {\n                const on = (...args) => {\n                    this.off(event, on);\n                    return fn.apply(this, args);\n                };\n                this.on(event, on);\n            },\n            off(event, fn) {\n                event = `$${event}`;\n                if (!arguments.length) {\n                    listeners = {};\n                }\n                else {\n                    const cbs = listeners[event];\n                    if (cbs) {\n                        if (!fn) {\n                            listeners[event] = null;\n                        }\n                        else {\n                            for (let i = 0, l = cbs.length; i < l; i++) {\n                                const cb = cbs[i];\n                                if (cb === fn || cb.fn === fn) {\n                                    cbs.splice(i, 1);\n                                    break;\n                                }\n                            }\n                        }\n                    }\n                }\n            },\n            emit(event, ...args) {\n                const $event = `$${event}`;\n                let cbs = listeners[$event];\n                if (cbs) {\n                    cbs = cbs.slice();\n                    for (let i = 0, l = cbs.length; i < l; i++) {\n                        try {\n                            const result = cbs[i].apply(this, args);\n                            if (typeof (result === null || result === void 0 ? void 0 : result.catch) === 'function') {\n                                result.catch((e) => {\n                                    console.error(`[Hook] Error in async event handler for ${event} with args:`, args);\n                                    console.error(e);\n                                });\n                            }\n                        }\n                        catch (e) {\n                            console.error(`[Hook] Error in event handler for ${event} with args:`, args);\n                            console.error(e);\n                        }\n                    }\n                }\n                else {\n                    const buffered = [Date.now(), event, ...args];\n                    this._buffer.push(buffered);\n                    for (let i = 2; i < args.length; i++) {\n                        if (typeof args[i] === 'object' && args[i]) {\n                            // Save by component instance  (3rd, 4th or 5th arg)\n                            this._bufferMap.set(args[i], buffered);\n                            break;\n                        }\n                    }\n                }\n            },\n            /**\n             * Remove buffered events with any argument that is equal to the given value.\n             * @param matchArg Given value to match.\n             */\n            cleanupBuffer(matchArg) {\n                const inBuffer = this._bufferMap.has(matchArg);\n                if (inBuffer) {\n                    // Mark event for removal\n                    this._bufferToRemove.set(this._bufferMap.get(matchArg), true);\n                }\n                return inBuffer;\n            },\n            _cleanupBuffer() {\n                const now = Date.now();\n                // Clear buffer events that are older than 10 seconds or marked for removal\n                this._buffer = this._buffer.filter(args => !this._bufferToRemove.has(args) && now - args[0] < 10000);\n                this._bufferToRemove.clear();\n                this._bufferMap.clear();\n            },\n        };\n        setInterval(() => {\n            hook._cleanupBuffer();\n        }, 10000);\n        hook.once('init', (Vue) => {\n            hook.Vue = Vue;\n            if (Vue) {\n                Vue.prototype.$inspect = function () {\n                    const fn = target.__VUE_DEVTOOLS_INSPECT__;\n                    fn && fn(this);\n                };\n            }\n        });\n        hook.on('app:init', (app, version, types) => {\n            const appRecord = {\n                app,\n                version,\n                types,\n            };\n            hook.apps.push(appRecord);\n            hook.emit('app:add', appRecord);\n        });\n        hook.once('vuex:init', (store) => {\n            hook.store = store;\n            hook.initialState = clone(store.state);\n            const origReplaceState = store.replaceState.bind(store);\n            store.replaceState = (state) => {\n                hook.initialState = clone(state);\n                origReplaceState(state);\n            };\n            // Dynamic modules\n            let origRegister, origUnregister;\n            if (store.registerModule) {\n                hook.storeModules = [];\n                origRegister = store.registerModule.bind(store);\n                store.registerModule = (path, module, options) => {\n                    if (typeof path === 'string') {\n                        path = [path];\n                    }\n                    hook.storeModules.push({ path, module, options });\n                    origRegister(path, module, options);\n                    if (true) {\n                        // eslint-disable-next-line no-console\n                        console.log('early register module', path, module, options);\n                    }\n                };\n                origUnregister = store.unregisterModule.bind(store);\n                store.unregisterModule = (path) => {\n                    if (typeof path === 'string') {\n                        path = [path];\n                    }\n                    const key = path.join('/');\n                    const index = hook.storeModules.findIndex(m => m.path.join('/') === key);\n                    if (index !== -1) {\n                        hook.storeModules.splice(index, 1);\n                    }\n                    origUnregister(path);\n                    if (true) {\n                        // eslint-disable-next-line no-console\n                        console.log('early unregister module', path);\n                    }\n                };\n            }\n            hook.flushStoreModules = () => {\n                store.replaceState = origReplaceState;\n                if (store.registerModule) {\n                    store.registerModule = origRegister;\n                    store.unregisterModule = origUnregister;\n                }\n                return hook.storeModules || [];\n            };\n        });\n    }\n    Object.defineProperty(target, '__VUE_DEVTOOLS_GLOBAL_HOOK__', {\n        get() {\n            return hook;\n        },\n    });\n    // Handle apps initialized before hook injection\n    if (target.__VUE_DEVTOOLS_HOOK_REPLAY__) {\n        try {\n            target.__VUE_DEVTOOLS_HOOK_REPLAY__.forEach(cb => cb(hook));\n            target.__VUE_DEVTOOLS_HOOK_REPLAY__ = [];\n        }\n        catch (e) {\n            console.error('[vue-devtools] Error during hook replay', e);\n        }\n    }\n    // Clone deep utility for cloning initial state of the store\n    // Forked from https://github.com/planttheidea/fast-copy\n    // Last update: 2019-10-30\n    // ⚠️ Don't forget to update `./hook.js`\n    // utils\n    const { toString: toStringFunction } = Function.prototype;\n    const { create, defineProperty, getOwnPropertyDescriptor, getOwnPropertyNames, getOwnPropertySymbols, getPrototypeOf, } = Object;\n    const { hasOwnProperty, propertyIsEnumerable } = Object.prototype;\n    /**\n     * @enum\n     *\n     * @const {object} SUPPORTS\n     *\n     * @property {boolean} SYMBOL_PROPERTIES are symbol properties supported\n     * @property {boolean} WEAKSET is WeakSet supported\n     */\n    const SUPPORTS = {\n        SYMBOL_PROPERTIES: typeof getOwnPropertySymbols === 'function',\n        WEAKSET: typeof WeakSet === 'function',\n    };\n    /**\n     * @function createCache\n     *\n     * @description\n     * get a new cache object to prevent circular references\n     *\n     * @returns the new cache object\n     */\n    const createCache = () => {\n        if (SUPPORTS.WEAKSET) {\n            return new WeakSet();\n        }\n        const object = create({\n            add: value => object._values.push(value),\n            has: value => !!~object._values.indexOf(value),\n        });\n        object._values = [];\n        return object;\n    };\n    /**\n     * @function getCleanClone\n     *\n     * @description\n     * get an empty version of the object with the same prototype it has\n     *\n     * @param object the object to build a clean clone from\n     * @param realm the realm the object resides in\n     * @returns the empty cloned object\n     */\n    const getCleanClone = (object, realm) => {\n        if (!object.constructor) {\n            return create(null);\n        }\n        // eslint-disable-next-line no-proto, no-restricted-properties\n        const prototype = object.__proto__ || getPrototypeOf(object);\n        if (object.constructor === realm.Object) {\n            return prototype === realm.Object.prototype ? {} : create(prototype);\n        }\n        if (~toStringFunction.call(object.constructor).indexOf('[native code]')) {\n            try {\n                return new object.constructor();\n            }\n            catch (e) {\n                // Error\n            }\n        }\n        return create(prototype);\n    };\n    /**\n     * @function getObjectCloneLoose\n     *\n     * @description\n     * get a copy of the object based on loose rules, meaning all enumerable keys\n     * and symbols are copied, but property descriptors are not considered\n     *\n     * @param object the object to clone\n     * @param realm the realm the object resides in\n     * @param handleCopy the function that handles copying the object\n     * @returns the copied object\n     */\n    const getObjectCloneLoose = (object, realm, handleCopy, cache) => {\n        const clone = getCleanClone(object, realm);\n        for (const key in object) {\n            if (hasOwnProperty.call(object, key)) {\n                clone[key] = handleCopy(object[key], cache);\n            }\n        }\n        if (SUPPORTS.SYMBOL_PROPERTIES) {\n            const symbols = getOwnPropertySymbols(object);\n            if (symbols.length) {\n                for (let index = 0, symbol; index < symbols.length; index++) {\n                    symbol = symbols[index];\n                    if (propertyIsEnumerable.call(object, symbol)) {\n                        clone[symbol] = handleCopy(object[symbol], cache);\n                    }\n                }\n            }\n        }\n        return clone;\n    };\n    /**\n     * @function getObjectCloneStrict\n     *\n     * @description\n     * get a copy of the object based on strict rules, meaning all keys and symbols\n     * are copied based on the original property descriptors\n     *\n     * @param object the object to clone\n     * @param realm the realm the object resides in\n     * @param handleCopy the function that handles copying the object\n     * @returns the copied object\n     */\n    const getObjectCloneStrict = (object, realm, handleCopy, cache) => {\n        const clone = getCleanClone(object, realm);\n        const properties = SUPPORTS.SYMBOL_PROPERTIES\n            ? [].concat(getOwnPropertyNames(object), getOwnPropertySymbols(object))\n            : getOwnPropertyNames(object);\n        if (properties.length) {\n            for (let index = 0, property, descriptor; index < properties.length; index++) {\n                property = properties[index];\n                if (property !== 'callee' && property !== 'caller') {\n                    descriptor = getOwnPropertyDescriptor(object, property);\n                    descriptor.value = handleCopy(object[property], cache);\n                    defineProperty(clone, property, descriptor);\n                }\n            }\n        }\n        return clone;\n    };\n    /**\n     * @function getRegExpFlags\n     *\n     * @description\n     * get the flags to apply to the copied regexp\n     *\n     * @param regExp the regexp to get the flags of\n     * @returns the flags for the regexp\n     */\n    const getRegExpFlags = (regExp) => {\n        let flags = '';\n        if (regExp.global) {\n            flags += 'g';\n        }\n        if (regExp.ignoreCase) {\n            flags += 'i';\n        }\n        if (regExp.multiline) {\n            flags += 'm';\n        }\n        if (regExp.unicode) {\n            flags += 'u';\n        }\n        if (regExp.sticky) {\n            flags += 'y';\n        }\n        return flags;\n    };\n    const { isArray } = Array;\n    const GLOBAL_THIS = (() => {\n        // eslint-disable-next-line no-restricted-globals\n        if (typeof self !== 'undefined') {\n            // eslint-disable-next-line no-restricted-globals\n            return self;\n        }\n        if (typeof window !== 'undefined') {\n            return window;\n        }\n        if (typeof globalThis !== 'undefined') {\n            return globalThis;\n        }\n        if (console && console.error) {\n            console.error('Unable to locate global object, returning \"this\".');\n        }\n    })();\n    /**\n     * @function clone\n     *\n     * @description\n     * copy an object deeply as much as possible\n     *\n     * If `strict` is applied, then all properties (including non-enumerable ones)\n     * are copied with their original property descriptors on both objects and arrays.\n     *\n     * The object is compared to the global constructors in the `realm` provided,\n     * and the native constructor is always used to ensure that extensions of native\n     * objects (allows in ES2015+) are maintained.\n     *\n     * @param object the object to copy\n     * @param [options] the options for copying with\n     * @param [options.isStrict] should the copy be strict\n     * @param [options.realm] the realm (this) object the object is copied from\n     * @returns the copied object\n     */\n    function clone(object, options = null) {\n        // manually coalesced instead of default parameters for performance\n        const isStrict = !!(options && options.isStrict);\n        const realm = (options && options.realm) || GLOBAL_THIS;\n        const getObjectClone = isStrict\n            ? getObjectCloneStrict\n            : getObjectCloneLoose;\n        /**\n         * @function handleCopy\n         *\n         * @description\n         * copy the object recursively based on its type\n         *\n         * @param object the object to copy\n         * @returns the copied object\n         */\n        const handleCopy = (object, cache) => {\n            if (!object || typeof object !== 'object' || cache.has(object)) {\n                return object;\n            }\n            // DOM objects\n            if (typeof HTMLElement !== 'undefined' && object instanceof HTMLElement) {\n                return object.cloneNode(false);\n            }\n            const Constructor = object.constructor;\n            // plain objects\n            if (Constructor === realm.Object) {\n                cache.add(object);\n                return getObjectClone(object, realm, handleCopy, cache);\n            }\n            let clone;\n            // arrays\n            if (isArray(object)) {\n                cache.add(object);\n                // if strict, include non-standard properties\n                if (isStrict) {\n                    return getObjectCloneStrict(object, realm, handleCopy, cache);\n                }\n                clone = new Constructor();\n                for (let index = 0; index < object.length; index++) {\n                    clone[index] = handleCopy(object[index], cache);\n                }\n                return clone;\n            }\n            // dates\n            if (object instanceof realm.Date) {\n                return new Constructor(object.getTime());\n            }\n            // regexps\n            if (object instanceof realm.RegExp) {\n                clone = new Constructor(object.source, object.flags || getRegExpFlags(object));\n                clone.lastIndex = object.lastIndex;\n                return clone;\n            }\n            // maps\n            if (realm.Map && object instanceof realm.Map) {\n                cache.add(object);\n                clone = new Constructor();\n                object.forEach((value, key) => {\n                    clone.set(key, handleCopy(value, cache));\n                });\n                return clone;\n            }\n            // sets\n            if (realm.Set && object instanceof realm.Set) {\n                cache.add(object);\n                clone = new Constructor();\n                object.forEach((value) => {\n                    clone.add(handleCopy(value, cache));\n                });\n                return clone;\n            }\n            // buffers (node-only)\n            if (realm.Buffer && realm.Buffer.isBuffer(object)) {\n                clone = realm.Buffer.allocUnsafe\n                    ? realm.Buffer.allocUnsafe(object.length)\n                    : new Constructor(object.length);\n                object.copy(clone);\n                return clone;\n            }\n            // arraybuffers / dataviews\n            if (realm.ArrayBuffer) {\n                // dataviews\n                if (realm.ArrayBuffer.isView(object)) {\n                    return new Constructor(object.buffer.slice(0));\n                }\n                // arraybuffers\n                if (object instanceof realm.ArrayBuffer) {\n                    return object.slice(0);\n                }\n            }\n            // if the object cannot / should not be cloned, don't\n            if (\n            // promise-like\n            (hasOwnProperty.call(object, 'then') && typeof object.then === 'function')\n                // errors\n                || object instanceof Error\n                // weakmaps\n                || (realm.WeakMap && object instanceof realm.WeakMap)\n                // weaksets\n                || (realm.WeakSet && object instanceof realm.WeakSet)) {\n                return object;\n            }\n            cache.add(object);\n            // assume anything left is a custom constructor\n            return getObjectClone(object, realm, handleCopy, cache);\n        };\n        return handleCopy(object, createCache());\n    }\n}\nexports.installHook = installHook;\n//# sourceMappingURL=hook.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../../node_modules/@vue-devtools/app-backend-core/lib/hook.js\n");

/***/ }),

/***/ "../shell-host/src/hook.js":
/*!*********************************!*\
  !*** ../shell-host/src/hook.js ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _back_hook__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @back/hook */ \"../../node_modules/@vue-devtools/app-backend-core/lib/hook.js\");\n\n(0,_back_hook__WEBPACK_IMPORTED_MODULE_0__.installHook)(window);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vc2hlbGwtaG9zdC9zcmMvaG9vay5qcyIsIm1hcHBpbmdzIjoiOztBQUFBO0FBRUFBLHVEQUFXLENBQUNDLE1BQUQsQ0FBWCIsInNvdXJjZXMiOlsid2VicGFjazovL0B2dWUtZGV2dG9vbHMvc2hlbGwtZGV2LXZ1ZTMvLi4vc2hlbGwtaG9zdC9zcmMvaG9vay5qcz8wZGQyIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGluc3RhbGxIb29rIH0gZnJvbSAnQGJhY2svaG9vaydcblxuaW5zdGFsbEhvb2sod2luZG93KVxuIl0sIm5hbWVzIjpbImluc3RhbGxIb29rIiwid2luZG93Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///../shell-host/src/hook.js\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval-source-map devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("../shell-host/src/hook.js");
/******/ 	
/******/ })()
;